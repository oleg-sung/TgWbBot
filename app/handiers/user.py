import datetime

import asyncio

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.notification.base import scheduled_task as scheduled_task, send_notification
from app.keyboard.inline import inline
from app.keyboard.reply import reply
from app.db.orm_query import orm_add_product, orm_get_product
from app.service.wb_servises import get_item_by_articyl, validate_articyl

router = Router()


class Art(StatesGroup):
    id = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}! üñêüèª\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫–ª—é Wildberries!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:\n"
        "1‚É£ –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫–ª—é - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É üåê\n\n"
        "2‚É£ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–∏–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–æ–≤–∞—Ä—É - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚ùå\n\n"
        "3‚É£ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î üíΩ",
        reply_markup=reply,
    )


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É")
async def get_item_info(message: Message, state: FSMContext):
    await state.set_state(Art.id)
    await message.answer(
        f"–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 9 —Ü–∏—Ñ—Ä ‚ùó\n–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–∞–≤–∞—Ä–∞ üëá",
        reply_markup=reply,
    )


@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def stop_notification(message: Message):
    await send_notification(message.from_user.id, status=False)
    await message.answer(f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã ‚ùå", reply_markup=reply)


@router.message(Art.id)
async def cheak_art(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(id=message.text)
    art = await state.get_data()
    await state.clear()
    validate_data = await validate_articyl(art["id"])
    if validate_data is not art["id"]:
        await message.answer(validate_data, reply_markup=reply)
    else:
        data = await get_item_by_articyl(validate_data)
        if isinstance(data, str):
            await message.answer(text=data, reply_markup=reply)
        else:
            await message.answer(
                f"üì¶ {data['name']} üì¶\n\n"
                f"üßÆ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {data['id']}\n"
                f"üíµ –¶–µ–Ω–∞: {data['price']//100} —Ä—É–±–ª–µ–π\n"
                f"üóÉ –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö: {data['qty']}—à—Ç.",
                reply_markup=inline,
            )

            history_date = {"user_id": message.from_user.id, "art": int(validate_data)}
            await orm_add_product(session, history_date)


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î")
async def get_info_from_db(message: Message, session: AsyncSession):
    data = await orm_get_product(session, message.from_user.id)
    text = "üì¶ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ üì¶\n"
    count = 0
    for item in data:
        count += 1
        t = (
            f"\n\n{count}. üßÆ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {item.art}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {item.created.replace(microsecond=0) + datetime.timedelta(hours=3)}"
        )
        text += t
    await message.answer(f"{text}", reply_markup=reply)


@router.callback_query(lambda c: c.data == "subscribe")
async def subscribe(call: CallbackQuery):
    await call.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úÖ", reply_markup=reply)
    scheduled_task[call.from_user.id] = asyncio.create_task(
        send_notification(call.from_user.id, text=call.message.text)
    )
